#!/usr/bin/env bash

set -euo pipefail
${DEBUG:-}

Usage() {
  cat <<EOF >&2
usage: $(basename "$0") command [args]
  run | ssh
  create-fresh | create-from-disk | create-from-snapshot
  suspend | resume
  list/status
  start/up | stop/down
  allow-web | allow-dev-web
EOF
  exit 2
}

if [[ $# -eq 0 ]]; then
  Usage
fi

account=$DEVBOX_ACCOUNT
project=$DEVBOX_PROJECT
region=australia-southeast1
zone=$region-a

name=dev
name=dev-au
name=derby

disk=dev-au
diskSize=40GB
diskType=pd-ssd

machineType=n1-standard-4
machineType=n1-highcpu-8

# 8vCPU 10GB RAM
machineType="custom-8-$((10 * 1024))"

imageProject=ubuntu-os-cloud
imageFamily=ubuntu-1604-lts
imageFamily=ubuntu-minimal-1804-lts # nice but no man pages
imageFamily=ubuntu-1804-lts

tags='dev,http-server,https-server'

snapshot=dev-au-snapshot-1
sourceSnapshot=dev-1

# Override default instance name.
if [[ $# -ge 2 && $1 == '--name' ]]; then
  name=$2
  shift
  shift
fi

command=$1; shift

# aliases
[[ $command == up ]] && command=start
[[ $command == down ]] && command=stop
[[ $command == dn ]] && command=stop
[[ $command == connect ]] && command=tmux-control-mode
[[ $command == in ]] && command=tmux-control-mode

if [[ $command == run ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    "$@"

elif [[ $command == suspend || $command == hibernate ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    alpha compute instances suspend "$name" \
      --zone=$zone

elif [[ $command == resume ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    alpha compute instances resume "$name" \
      --zone=$zone

elif [[ $command == ssh ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute ssh "$name" \
      --zone=$zone \
      "--command=$*"

elif [[ $command == tmux-control-mode ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute ssh "$name" \
      --zone=$zone \
      '--ssh-flag=-tt' \
      '--command=source ~/.profile && tmux-cc-session'

elif [[ $command == set-machine-type ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute instances set-machine-type "$name" \
      --zone=$zone \
      --machine-type=$machineType \

elif [[ $command == create-fresh ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute instances create "$name" \
      --zone=$zone \
      --machine-type=$machineType \
      --no-restart-on-failure \
      --maintenance-policy=TERMINATE \
      --preemptible \
      --image-family=$imageFamily \
      --image-project=$imageProject \
      --boot-disk-device-name="$name" \
      --boot-disk-size=$diskSize \
      --boot-disk-type=$diskType \
      --no-boot-disk-auto-delete \
      --tags=$tags

elif [[ $command == create-disk-from-snapshot ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute disks create $disk --source-snapshot=$snapshot \
      --size=$diskSize \
      --type=$diskType \
      --zone=$zone

elif [[ $command == create-from-disk ]]; then

  # With help from https://digitalronin.github.io/2015/11/28/a-development-environment-in-the-cloud.html

  gcloud \
    --account=$account \
    --project=$project \
    compute instances create "$name" \
      --zone=$zone \
      --machine-type=$machineType \
      --no-restart-on-failure \
      --maintenance-policy=TERMINATE \
      --preemptible \
      --disk="name=$disk,device-name=$disk,mode=rw,boot=yes,auto-delete=no" \
      --tags=$tags

elif [[ $command == start || $command == stop ]]; then

  if [[ $# -eq 1 ]]; then
    name=$1
  fi
  gcloud \
    --account=$account \
    --project=$project \
    compute instances "$command" "$name" \
      --zone=$zone

elif [[ $command == status || $command == list ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute instances list

elif [[ $command == create-from-snapshot ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute disks create "$name" --size=$diskSize \
      --zone=$zone \
      --source-snapshot=$sourceSnapshot \
      --type=pd-ssd

  gcloud \
    --account=$account \
    --project=$project \
    beta compute instances create "$name" \
      --zone=$zone \
      --machine-type=$machineType \
      --no-restart-on-failure \
      --maintenance-policy=TERMINATE \
      --preemptible \
      --min-cpu-platform=Automatic \
      --disk="name=$name,device-name=$name,mode=rw,boot=yes,auto-delete=no" \
      --tags=$tags

elif [[ $command == allow-web ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute firewall-rules create default-allow-http \
      --network=default \
      --action=ALLOW --rules=tcp:80 \
      --source-ranges=0.0.0.0/0 \
      --target-tags=http-server

  gcloud \
    --account=$account \
    --project=$project \
    compute firewall-rules create default-allow-https \
      --network=default --action=ALLOW --rules=tcp:443 --source-ranges=0.0.0.0/0 \
      --target-tags=https-server

elif [[ $command == allow-dev-web ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute firewall-rules create allow-dev-web \
      --description='Allow development "web" ports: 3000-3001, 7020, 8000-8001, 8080-8081' \
      --allow tcp:3000-3001,tcp:7020,tcp:8000-8001,tcp:8080-8081 \
      --source-ranges=0.0.0.0/0 \
      --target-tags=dev

elif [[ $command == allow-mosh ]]; then

  gcloud \
    --account=$account \
    --project=$project \
    compute firewall-rules create allow-mosh \
      --description='Allow mosh UDP: 60000-61000' \
      --allow udp:60000-61000 \
      --source-ranges=0.0.0.0/0 \
      --target-tags=dev

else
  Usage
fi
