#!/usr/bin/env bash

set -euo pipefail
${DEBUG:-}

script=$(basename $0)

Usage() {
  cat <<EOF >&2
usage: ${script} command [args]
  new
  up | down
  ssh
  in
  run
  status
  create-fresh | create-from-disk | create-from-snapshot
EOF
  exit 2
}

if [[ $# -eq 0 ]]; then
  Usage
fi

export CLOUDSDK_CORE_ACCOUNT=$DEVBOX_CORE_ACCOUNT
export CLOUDSDK_CORE_PROJECT=$DEVBOX_CORE_PROJECT
export CLOUDSDK_COMPUTE_REGION=$DEVBOX_COMPUTE_REGION
export CLOUDSDK_COMPUTE_ZONE=$DEVBOX_COMPUTE_ZONE

name=$DEVBOX_NAME

disk=$name
diskSize=50GB
diskType=pd-ssd

#machineType=n1-standard-4
#machineType=n1-highcpu-8

vCPU=4
ramGB=12
machineType="custom-${vCPU}-$(($ramGB * 1024))"

imageProject=ubuntu-os-cloud
imageFamily=ubuntu-1804-lts

tags='dev,http-server,https-server'

snapshot=${name}-1

# Override default instance name.
if [[ $# -ge 2 && $1 == '--name' ]]; then
  name=$2
  shift
  shift
fi

command=$1; shift

allowWeb() {
  echo "Creating default-allow-http..."
  gcloud compute firewall-rules create default-allow-http \
    --network=default \
    --action=ALLOW \
    --rules=tcp:80 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=http-server

  echo "Creating default-allow-https..."
  gcloud compute firewall-rules create default-allow-https \
    --network=default \
    --action=ALLOW \
    --rules=tcp:443 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=https-server
}

allowDevWeb() {
  echo "Creating allow-dev-web..."
  gcloud compute firewall-rules create allow-dev-web \
    --description='Allow dev ports' \
    --allow tcp:3000-3001,tcp:7020,tcp:8000-8001,tcp:8080-8081 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=dev
}

allowMosh() {
  echo "Creating allow-mosh..."
  gcloud compute firewall-rules create allow-mosh \
    --description='Allow mosh' \
    --allow udp:60000-61000 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=dev
}

# aliases
[[ $command == up ]] && command=start
[[ $command == down ]] && command=stop
[[ $command == dn ]] && command=stop
[[ $command == connect ]] && command=tmux-control-mode
[[ $command == in ]] && command=tmux-control-mode
[[ $command == init ]] && command=create-fresh
[[ $command == new ]] && command=create-fresh

if [[ $command == run ]]; then

  gcloud "$@"

elif [[ $command == suspend || $command == hibernate ]]; then

  gcloud alpha compute instances suspend "$name"

elif [[ $command == resume ]]; then

  gcloud alpha compute instances resume "$name"

elif [[ $command == ssh ]]; then

  gcloud compute ssh "$name" \
    "--command=$*"

elif [[ $command == mosh ]]; then

  mosh "$(devbox external-ip)" "$@"

elif [[ $command == tmux-control-mode ]]; then

  gcloud compute ssh "$name" \
    '--ssh-flag=-tt' \
    '--command=source ~/.profile && tmux-cc-session'

elif [[ $command == set-machine-type ]]; then

  gcloud compute instances set-machine-type "$name" \
    --machine-type=$machineType \

elif [[ $command == create-fresh ]]; then

  echo "Creating instance $name..."
  gcloud compute instances create "$name" \
    --machine-type=$machineType \
    --no-restart-on-failure \
    --maintenance-policy=TERMINATE \
    --preemptible \
    --image-family=$imageFamily \
    --image-project=$imageProject \
    --boot-disk-device-name="$name" \
    --boot-disk-size=$diskSize \
    --boot-disk-type=$diskType \
    --no-boot-disk-auto-delete \
    --tags=$tags

  avoidThis() {
    echo
    allowWeb
    echo
    allowDevWeb
    echo
    allowMosh
  }

elif [[ $command == create-snapshot ]]; then

  gcloud compute disks snapshot "$disk" \
    --snapshot-names="$snapshot" \

elif [[ $command == create-disk-from-snapshot ]]; then

  gcloud compute disks create "$disk" \
    --source-snapshot="$snapshot" \
    --size=$diskSize \
    --type=$diskType \

elif [[ $command == create-from-disk ]]; then

  # With help from:
  # https://digitalronin.github.io/2015/11/28/a-development-environment-in-the-cloud.html

  gcloud compute instances create "$name" \
    --machine-type=$machineType \
    --no-restart-on-failure \
    --maintenance-policy=TERMINATE \
    --preemptible \
    --disk="name=$disk,device-name=$disk,mode=rw,boot=yes,auto-delete=no" \
    --tags=$tags

elif [[ $command == start || $command == stop ]]; then

  if [[ $# -eq 1 ]]; then
    name=$1; shift
  fi

  gcloud compute instances "$command" "$name"

elif [[ $command == status || $command == list ]]; then

  gcloud compute instances list

elif [[ $command == create-from-snapshot ]]; then

  if [[ $# -ne 2 ]]; then
    echo "usage: devbox create-from-snapshot zone name"
    exit 2
  fi

  zone=$1; shift
  name=$1; shift

  gcloud compute disks create "$name" \
    --size=$diskSize \
    --source-snapshot="$snapshot" \
    --type=pd-ssd

  gcloud compute instances create "$name" \
    --machine-type=$machineType \
    --no-restart-on-failure \
    --maintenance-policy=TERMINATE \
    --preemptible \
    --min-cpu-platform=Automatic \
    --disk="name=$name,device-name=$name,mode=rw,boot=yes,auto-delete=no" \
    --tags=$tags

elif [[ $command == allow-web ]]; then

  allowWeb

elif [[ $command == allow-dev-web ]]; then

  allowDevWeb

elif [[ $command == allow-mosh ]]; then

  allowMosh

elif [[ $command == external-ip ]]; then

  gcloud compute instances describe "$name" \
    --format='value(networkInterfaces[0].accessConfigs[0].natIP)'

elif [[ $command == move-zone ]]; then

  # NOTE: Cannot move-zone unless the instance is running. Seems to defeat the
  # purpose if there's a problem with the region!

  if [[ $# -ne 1 ]]; then
    echo "usage: devbox move-zone destination-zone"
    exit 2
  fi
  destinationZone=$1; shift

  gcloud compute instances move "$name" \
    --destination-zone="$destinationZone"

elif [[ $command == upload-ssh-keys ]]; then

  ip=$(gcloud compute instances describe "$DEVBOX_NAME" \
         --format='value(networkInterfaces[0].networkIP)')
  if [[ -z $ip ]]; then
    echo "$script: Cannot find IP of $DEVBOX_NAME. Is it up?"
    exit 1
  fi
  set -x
  gcloud compute scp ~/.ssh/id_rsa ~/.ssh/id_rsa.pub $DEVBOX_NAME:.ssh/
  set +x

else
  Usage
fi
