#!/usr/bin/env bash

simple_prompt() {
  PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs

  __prompt_command() {
    local last_exit_status="$?"
    PS1=""

    local RCol='\[\e[0m\]'

    local Red='\[\e[0;31m\]'
    local Gre='\[\e[0;32m\]'
    local BYel='\[\e[1;33m\]'
    local BBlu='\[\e[1;34m\]'
    local Pur='\[\e[0;35m\]'

    if [ $last_exit_status != 0 ]; then
      PS1+="${Red}\u${RCol}"      # Add red if exit code non 0
    else
      PS1+="${Gre}\u${RCol}"
    fi

    PS1+="${RCol}@${BBlu}\h ${Pur}\W${BYel}$ ${RCol}"
  }
}

#
# Bring in git-prompt.
#
trySource ~/.nix-profile/etc/bash_completion.d/git-prompt.sh ||
  trySource /etc/bash_completion.d/git-prompt.sh ||
  trySource /usr/share/git/git-prompt.sh || # MSYS2
  trySource "${HOMEBREW_PREFIX}/etc/bash_completion.d/git-prompt.sh"

bash_prompt() {
  [[ -z $PS1 ]] && return
    setGitPrompt() {
    local last_exit_status="$?"

    case $TERM in
      xterm*|rxvt*)
        local TITLEBAR='\[\033]0;\u@\h:\w\007\]'
        ;;
      *)
        local TITLEBAR=""
        ;;
    esac

    local NONE="\[\033[0m\]"  # unsets color to term's fg color
    # regular colors
    # shellcheck disable=SC2034
    local K="\[\033[0;30m\]"  # black
    # shellcheck disable=SC2034
    local R="\[\033[0;31m\]"  # red
    # shellcheck disable=SC2034
    local G="\[\033[0;32m\]"  # green
    # shellcheck disable=SC2034
    local Y="\[\033[0;33m\]"  # yellow (brown)
    # shellcheck disable=SC2034
    local B="\[\033[0;34m\]"  # blue
    # shellcheck disable=SC2034
    local M="\[\033[0;35m\]"  # magenta
    local C="\[\033[0;36m\]"  # cyan
    # shellcheck disable=SC2034
    local W="\[\033[1;37m\]"  # white

    # emphasized (bolded) colors
    # shellcheck disable=SC2034
    local EMK="\[\033[1;30m\]"
    # shellcheck disable=SC2034
    local EMR="\[\033[1;31m\]"
    # shellcheck disable=SC2034
    local EMG="\[\033[1;32m\]"
    # shellcheck disable=SC2034
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    # shellcheck disable=SC2034
    local EMM="\[\033[1;35m\]"
    # shellcheck disable=SC2034
    local EMC="\[\033[1;36m\]"
    # shellcheck disable=SC2034
    local EMW="\[\033[1;37m\]"

    # background colors
    # shellcheck disable=SC2034
    local BGK="\[\033[40m\]"
    # shellcheck disable=SC2034
    local BGR="\[\033[41m\]"
    # shellcheck disable=SC2034
    local BGG="\[\033[42m\]"
    # shellcheck disable=SC2034
    local BGY="\[\033[43m\]"
    # shellcheck disable=SC2034
    local BGB="\[\033[44m\]"
    # shellcheck disable=SC2034
    local BGM="\[\033[45m\]"
    # shellcheck disable=SC2034
    local BGC="\[\033[46m\]"
    # shellcheck disable=SC2034
    local BGW="\[\033[47m\]"

    if [[ $(id -u) -eq "0" ]]; then
      local UPC=${R}            # user prompt colour
    else
      local UPC=${G}            # user prompt colour
    fi
    local UP='\$'               # user prompt

    if [[ ${SHELLY_OS} == 'msys' ]]; then
      # FIXME: Set a simpler prompt for MSYS2 as the regular one doesn't work.
      __git_ps1 "\n\u@\h:\w" \\n"\\\$ "
    else
      if [[ ${last_exit_status} -eq 0 ]]; then
        local user_host_colour="${C}"
      else
        local user_host_colour="${EMR}"
      fi
      local reset_colour="${NONE}"
      local shell_colour="${UPC}"
      local cwd_colour="${EMB}"
      local separator_colour="${reset_colour}"
      local git_prompt_colour="${EMC}"
      local nix_colour="${M}"

      # Avoid some arrow characters when running under Google Cloud Shell.
      if [[ -n "$DEVSHELL_IP_ADDRESS" ]]; then
          local TOP_LEFT='┌'
          local BOT_LEFT='└'
      else
          local TOP_LEFT='╭'
          local BOT_LEFT='╰'
      fi

      in_direnv() {
          if [[ -n $DIRENV_DIR ]]; then
              echo -n -e " \e;\e[1;33mdirenv\e[m" # Bright yellow.
          else
              echo -n -e ""
          fi
      }

      local shell="${shell_colour}bash${reset_colour}"
      local nix="${IN_NIX_SHELL:+ ${nix_colour}${IN_NIX_SHELL}${reset_colour}}"
      # shellcheck disable=SC2016
      local direnv='$(in_direnv)\e[m'
      local user_host_cwd="\
${user_host_colour}\${debian_chroot:+(${debian_chroot:-})}\u@\h\
${separator_colour}:\
${cwd_colour}\w$reset_colour"
      local PROMPT_LINE_1="${UPC}${TOP_LEFT}─${user_host_cwd} ${shell}${nix}${direnv}"
      local PROMPT_LINE_2="${UPC}${BOT_LEFT}─${UP}${reset_colour} "
      local iterm2Mark=""
      if [[ ${SHELLY_OS} == 'darwin' ]]; then
        iterm2Mark="\[$(iterm2_prompt_mark)\]"
      fi

      GIT_PS1_1="${TITLEBAR}\n${PROMPT_LINE_1}"
      GIT_PS1_2="\n${iterm2Mark}${PROMPT_LINE_2}"
      GIT_PS1_3=" ${git_prompt_colour}[%s${git_prompt_colour}]"

      # shellcheck disable=SC2034
      GIT_PS1_SHOWDIRTYSTATE=true
      # shellcheck disable=SC2034
      GIT_PS1_SHOWSTASHSTATE=true
      # shellcheck disable=SC2034
      GIT_PS1_SHOWUNTRACKEDFILES=true
      # shellcheck disable=SC2034
      GIT_PS1_SHOWUPSTREAM='auto'
      # shellcheck disable=SC2034
      GIT_PS1_SHOWCOLORHINTS=true

      __git_ps1 "${GIT_PS1_1}" "${GIT_PS1_2}" "${GIT_PS1_3}"
    fi
  }
  precmd_functions+=(setGitPrompt)
}
bash_prompt
unset -f bash_prompt
unset -f simple_prompt
