-- Pretty printing with ghci-pretty.
import qualified Prelude
:def pretty \_ -> Prelude.return ("import qualified System.IO\nimport Text.Show.Pretty (ppShow)\nimport Language.Haskell.HsColour\nimport Language.Haskell.HsColour.Colourise\nlet colourPrintXXX = System.IO.putStrLn Prelude.. hscolour TTY defaultColourPrefs Prelude.False Prelude.False [] Prelude.False Prelude.. ppShow\n:set -interactive-print colourPrintXXX")
:def no-pretty \_ -> Prelude.return (":set -interactive-print System.IO.print")
:pretty

:set -XOverloadedStrings
:set -Wall -fwarn-tabs -fno-warn-type-defaults -fno-warn-missing-signatures

-- Show the type of evaluated expression.
:set +t

-- Colourful prompt.
:set prompt "\n\ESC[1;34m%s\STX\n\ESC[0;33m\STXλ> \ESC[m\STX"
:set prompt "\ESC[0;33m\STXλ> \ESC[m\STX"
